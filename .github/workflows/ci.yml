name: CI

on:
  push:
    branches: [ "main", "master" ]
    tags:
      - 'v*'  # Push events to tags matching v*, i.e. v1.0, v0.1.0
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build & Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test with coverage
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        directory: ./coverage
        fail_ci_if_error: true
        flags: unittests
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: willibrandon/CursorMCPMonitor 

  publish-github:
    name: Publish to GitHub Packages
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Set version from git tag
      run: |
        # Extract version from git tag (remove 'v' prefix)
        VERSION="${GITHUB_REF#refs/tags/v}"
        sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/g" src/CursorMCPMonitor/CursorMCPMonitor.csproj
        echo "Updated version to $VERSION"
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Pack
      run: |
        mkdir -p nupkg
        dotnet pack src/CursorMCPMonitor/CursorMCPMonitor.csproj --configuration Release --no-build --output nupkg
    
    - name: Push to GitHub Packages
      run: |
        dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        dotnet nuget push ./nupkg/*.nupkg --source github --api-key ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nupkg
        path: ./nupkg/*.*

  publish-nuget:
    name: Publish to NuGet
    needs: publish-github
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: nupkg
        path: ./nupkg
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Push to NuGet
      run: dotnet nuget push ./nupkg/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  create-github-release:
    name: Create GitHub Release
    needs: publish-github  # Wait for publishing to complete
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for release notes
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: nupkg
        path: ./artifacts
    
    - name: Extract tag version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Generate release notes from commit messages since previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          # If no previous tag, use all commit messages
          COMMITS=$(git log --pretty=format:"* %s (%h)" ${{ github.ref_name }})
        else
          # If there's a previous tag, use commits between tags
          COMMITS=$(git log --pretty=format:"* %s (%h)" ${PREVIOUS_TAG}..${{ github.ref_name }})
        fi
        
        # Create release notes file with markdown
        echo "## Release v${{ steps.get_version.outputs.VERSION }}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Changes" >> release_notes.md
        echo "" >> release_notes.md
        echo "$COMMITS" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "dotnet tool install --global CursorMCPMonitor --version ${{ steps.get_version.outputs.VERSION }}" >> release_notes.md
        echo '```' >> release_notes.md
        
        # Save release notes to output
        RELEASE_NOTES=$(cat release_notes.md)
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: "v${{ steps.get_version.outputs.VERSION }}"
        body: ${{ steps.release_notes.outputs.notes }}
        files: ./artifacts/*.nupkg
        draft: false
        prerelease: false 